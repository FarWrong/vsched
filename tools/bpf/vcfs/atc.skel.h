/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __ATC_BPF_SKEL_H__
#define __ATC_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct atc_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *bss;
	} maps;
	struct {
		struct bpf_program *capacity;
	} progs;
	struct {
		struct bpf_link *capacity;
	} links;
	struct atc_bpf__bss {
		unsigned long tgidpid;
		unsigned long cgid;
		unsigned long allret;
		unsigned long max_exec_slice;
	} *bss;

#ifdef __cplusplus
	static inline struct atc_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct atc_bpf *open_and_load();
	static inline int load(struct atc_bpf *skel);
	static inline int attach(struct atc_bpf *skel);
	static inline void detach(struct atc_bpf *skel);
	static inline void destroy(struct atc_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
atc_bpf__destroy(struct atc_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
atc_bpf__create_skeleton(struct atc_bpf *obj);

static inline struct atc_bpf *
atc_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct atc_bpf *obj;
	int err;

	obj = (struct atc_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = atc_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	atc_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct atc_bpf *
atc_bpf__open(void)
{
	return atc_bpf__open_opts(NULL);
}

static inline int
atc_bpf__load(struct atc_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct atc_bpf *
atc_bpf__open_and_load(void)
{
	struct atc_bpf *obj;
	int err;

	obj = atc_bpf__open();
	if (!obj)
		return NULL;
	err = atc_bpf__load(obj);
	if (err) {
		atc_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
atc_bpf__attach(struct atc_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
atc_bpf__detach(struct atc_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *atc_bpf__elf_bytes(size_t *sz);

static inline int
atc_bpf__create_skeleton(struct atc_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "atc_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "atc_bpf.bss";
	s->maps[0].map = &obj->maps.bss;
	s->maps[0].mmaped = (void **)&obj->bss;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "capacity";
	s->progs[0].prog = &obj->progs.capacity;
	s->progs[0].link = &obj->links.capacity;

	s->data = (void *)atc_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *atc_bpf__elf_bytes(size_t *sz)
{
	*sz = 1968;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xb0\x04\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0c\0\
\x01\0\xb7\0\0\0\xe7\x03\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\
\x2f\x47\x50\x4c\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x38\x01\0\0\x38\x01\0\
\0\xef\0\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\x01\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\
\0\0\0\0\0\x01\0\0\x0d\x04\0\0\0\x14\0\0\0\x01\0\0\0\x18\0\0\0\0\0\0\x01\x04\0\
\0\0\x20\0\0\x01\x1c\0\0\0\x01\0\0\x0c\x03\0\0\0\x90\0\0\0\0\0\0\x01\x01\0\0\0\
\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x06\0\0\0\x08\0\0\0\x0d\0\0\0\x95\0\0\0\
\0\0\0\x01\x04\0\0\0\x20\0\0\0\xa9\0\0\0\0\0\0\x0e\x07\0\0\0\x01\0\0\0\xb1\0\0\
\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\xbf\0\0\0\0\0\0\x0e\x0a\0\0\0\x01\0\0\0\xc7\0\
\0\0\0\0\0\x0e\x0a\0\0\0\x01\0\0\0\xcc\0\0\0\0\0\0\x0e\x0a\0\0\0\x01\0\0\0\xd3\
\0\0\0\0\0\0\x0e\x0a\0\0\0\x01\0\0\0\xe2\0\0\0\x04\0\0\x0f\0\0\0\0\x0b\0\0\0\0\
\0\0\0\x08\0\0\0\x0c\0\0\0\0\0\0\0\x08\0\0\0\x0d\0\0\0\0\0\0\0\x08\0\0\0\x0e\0\
\0\0\0\0\0\0\x08\0\0\0\xe7\0\0\0\x01\0\0\x0f\0\0\0\0\x09\0\0\0\0\0\0\0\x0d\0\0\
\0\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\
\x63\x74\x78\0\x69\x6e\x74\0\x63\x61\x70\x61\x63\x69\x74\x79\0\x73\x63\x68\x65\
\x64\x2f\x63\x66\x73\x5f\x76\x63\x70\x75\x5f\x63\x61\x70\x61\x63\x69\x74\x79\0\
\x2f\x68\x6f\x6d\x65\x2f\x75\x62\x75\x6e\x74\x75\x2f\x76\x73\x63\x68\x65\x64\
\x2d\x31\x2f\x6c\x69\x6e\x75\x78\x2d\x36\x2e\x31\x2e\x33\x36\x2f\x74\x6f\x6f\
\x6c\x73\x2f\x62\x70\x66\x2f\x76\x63\x66\x73\x2f\x61\x74\x63\x2e\x62\x70\x66\
\x2e\x63\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\x63\x61\x70\x61\
\x63\x69\x74\x79\x29\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\
\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x4c\x49\x43\x45\x4e\x53\x45\0\x75\
\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x74\x67\x69\x64\x70\x69\x64\
\0\x63\x67\x69\x64\0\x61\x6c\x6c\x72\x65\x74\0\x6d\x61\x78\x5f\x65\x78\x65\x63\
\x5f\x73\x6c\x69\x63\x65\0\x2e\x62\x73\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\0\
\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x1c\0\0\0\x30\0\0\0\0\0\0\
\0\x08\0\0\0\x25\0\0\0\x01\0\0\0\0\0\0\0\x05\0\0\0\x10\0\0\0\x25\0\0\0\x01\0\0\
\0\0\0\0\0\x3d\0\0\0\x79\0\0\0\x05\x5c\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\0\0\
\x12\0\x03\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x83\0\0\0\x11\0\x04\0\0\0\0\0\0\
\0\0\0\x0d\0\0\0\0\0\0\0\x5d\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\
\0\x65\0\0\0\x11\0\x05\0\x08\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x2c\0\0\0\x11\0\
\x05\0\x10\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x4e\0\0\0\x11\0\x05\0\x18\0\0\0\0\0\
\0\0\x08\0\0\0\0\0\0\0\x0c\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\x18\x01\0\0\0\0\
\0\0\x04\0\0\0\x05\0\0\0\x24\x01\0\0\0\0\0\0\x04\0\0\0\x06\0\0\0\x30\x01\0\0\0\
\0\0\0\x04\0\0\0\x07\0\0\0\x48\x01\0\0\0\0\0\0\x04\0\0\0\x03\0\0\0\x2c\0\0\0\0\
\0\0\0\x04\0\0\0\x01\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x0a\x0b\0\x73\
\x63\x68\x65\x64\x2f\x63\x66\x73\x5f\x76\x63\x70\x75\x5f\x63\x61\x70\x61\x63\
\x69\x74\x79\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\
\x78\x74\0\x61\x6c\x6c\x72\x65\x74\0\x2e\x62\x73\x73\0\x2e\x6c\x6c\x76\x6d\x5f\
\x61\x64\x64\x72\x73\x69\x67\0\x6c\x69\x63\x65\x6e\x73\x65\0\x6d\x61\x78\x5f\
\x65\x78\x65\x63\x5f\x73\x6c\x69\x63\x65\0\x74\x67\x69\x64\x70\x69\x64\0\x63\
\x67\x69\x64\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\
\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6a\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x22\x04\0\0\0\0\0\0\x8b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x19\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x46\0\0\0\
\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x33\0\0\0\x08\0\0\0\x03\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7e\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x60\0\0\0\0\0\0\0\x3f\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x7a\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\
\x03\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x0b\0\0\0\x06\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x23\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x02\0\0\0\
\0\0\0\x50\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1f\
\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\x20\0\0\0\
\0\0\0\0\x0b\0\0\0\x08\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x38\0\0\0\x03\
\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x20\x04\0\0\0\0\0\0\x02\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x72\0\0\0\x02\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x02\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\x01\0\0\0\
\x02\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct atc_bpf *atc_bpf::open(const struct bpf_object_open_opts *opts) { return atc_bpf__open_opts(opts); }
struct atc_bpf *atc_bpf::open_and_load() { return atc_bpf__open_and_load(); }
int atc_bpf::load(struct atc_bpf *skel) { return atc_bpf__load(skel); }
int atc_bpf::attach(struct atc_bpf *skel) { return atc_bpf__attach(skel); }
void atc_bpf::detach(struct atc_bpf *skel) { atc_bpf__detach(skel); }
void atc_bpf::destroy(struct atc_bpf *skel) { atc_bpf__destroy(skel); }
const void *atc_bpf::elf_bytes(size_t *sz) { return atc_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
atc_bpf__assert(struct atc_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
	_Static_assert(sizeof(s->bss->tgidpid) == 8, "unexpected size of 'tgidpid'");
	_Static_assert(sizeof(s->bss->cgid) == 8, "unexpected size of 'cgid'");
	_Static_assert(sizeof(s->bss->allret) == 8, "unexpected size of 'allret'");
	_Static_assert(sizeof(s->bss->max_exec_slice) == 8, "unexpected size of 'max_exec_slice'");
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __ATC_BPF_SKEL_H__ */
